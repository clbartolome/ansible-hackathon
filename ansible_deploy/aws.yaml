---
- name: Deploy VPC, Subnet, Security Group, Keypair, and Windows Instance in AWS
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    region: eu-west-1
    cidr_block: "10.0.0.0/16"
    subnet_cidr_block: "10.0.1.0/24"
    availability_zone: "eu-west-1a"
    vpc_name: "AnsibleVPC"
    subnet_name: "AnsibleSubnet"
    sg_name: "AnsibleGroup"
    instance_type: "t3.medium"
    ami: "ami-0dafe364659bd5eb6"
    allowed_ports:
      - { port: 22, name: "SSH" }
      - { port: 80, name: "HTTP" }
      - { port: 443, name: "HTTPS" }
      - { port: 3389, name: "RDP" }
      - { port: 5985, name: "WINRM" }
      - { port: 5986, name: "WINRM" }
    purpose:
      project: AnsibleDemo

  tasks:
    - name: Create a VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ cidr_block }}"
        region: "{{ region }}"
        state: present
        tags: "{{ purpose }}"
      register: vpc

    - name: Create an Internet Gateway and attach it to the VPC
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        state: present
        tags: "{{ purpose }}"
      register: igw

    - name: Create a Subnet
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ subnet_cidr_block }}"
        region: "{{ region }}"
        map_public: true
        state: present
        tags: "{{ purpose }}"
      register: subnet

    - name: Create a Security Group
      amazon.aws.ec2_security_group:
        name: "{{ sg_name }}"
        description: "Allow SSH, HTTP, HTTPS, and RDP from anywhere"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        state: present
        tags: "{{ purpose }}"
      register: sg

    - name: Build security group rules
      set_fact:
        sg_rules: "{{ sg_rules | default([]) + [ { 'proto': 'tcp', 'from_port': item.port, 'to_port': item.port, 'cidr_ip': '0.0.0.0/0' } ] }}"
      loop: "{{ allowed_ports }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Create a Security Group with rules
      amazon.aws.ec2_security_group:
        name: "{{ sg_name }}"
        description: "Allow SSH, HTTP, HTTPS, and RDP from anywhere"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        rules: "{{ sg_rules }}"
        state: present
        tags: "{{ purpose }}"
      register: sg

    - name: Check if the route table exists
      amazon.aws.ec2_vpc_route_table_info:
        region: "{{ region }}"
        filters:
          vpc-id: "{{ vpc.vpc.id }}"
      register: existing_route_tables

    - name: Create a route table and associate it with the subnet
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: "{{ igw.gateway_id }}"
        subnets:
          - "{{ subnet.subnet.id }}"
        state: present
        tags: "{{ purpose }}"
      register: route_table

    - name: Create RSA Key Pair for Administrator
      amazon.aws.ec2_key:
        name: Administrator
        region: "{{ region }}"
        key_type: rsa
        tags: "{{ purpose }}"
      register: key

    - name: Download private key
      ansible.builtin.copy: 
        content: "{{ key.key.private_key }}" 
        dest: administrator.pem 
        mode: 0600
      when: lookup('file', 'administrator.pem') is false

    - name: Launch Windows Instance
      amazon.aws.ec2_instance:
        name: windows
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        image_id: "{{ ami }}"
        instance_type: "{{ instance_type }}"
        key_name: "{{ key.key.name }}"
        security_group: "{{ sg.group_id }}"
        region: "{{ region }}"
        state: present
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_size: 60
              volume_type: gp2
              delete_on_termination: true
        user_data: "{{ lookup('file', 'init.ps1') }}"
        wait: true
        tags: "{{ purpose }}"
      register: instance

    - name: Get the Administrator password
      community.aws.ec2_win_password:
        instance_id: "{{ instance.instances[0].instance_id }}"
        region: "{{ region }}"
        key_file: administrator.pem
        wait: true
      register: password

    - name: Show Administrator password
      debug:
        msg: "Administrator password: {{ password.win_password }}"
